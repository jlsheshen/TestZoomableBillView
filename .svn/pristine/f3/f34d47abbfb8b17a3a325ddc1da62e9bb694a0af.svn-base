package com.edu.testbill.billview.view;

import android.content.Context;
import android.graphics.Canvas;
import android.util.Log;
import android.widget.ImageView;

import com.edu.testbill.billview.ElementLayoutParams;
import com.edu.testbill.billview.IScaleable;
import com.edu.testbill.billview.ScaleUtil;
import com.edu.testbill.billview.data.BlankData;
import com.edu.testbill.billview.data.SignData;

/**
 * 印章视图,支持缩放
 * 
 * @author lucher
 * 
 */
public class SignView extends ImageView implements IScaleable {

	private static final String TAG = "SignView";
	// 对应印章的信息
	private SignData mData;

	public SignView(Context context) {
		super(context);
		init();
	}
	
	/**
	 * 初始化
	 */
	private void init() {
		setScaleType(ScaleType.FIT_XY);
	}

	/**
	 * 设置印章对应数据，并把数据应用到该印章上
	 * 
	 * @param data
	 *            数据
	 * @param scale
	 *            缩放比例
	 * @return 印章是否合法
	 */
	public boolean apply(SignData data, float scale) {
		mData = data;
		if (data.getBitmap() == null) {
			return false;
		}
		setImageBitmap(data.getBitmap());
		postScale(scale, 0);

		return true;
	}
	

	/**
	 * 获取对应空数据
	 * 
	 * @return
	 */
	public SignData getData() {
		return mData;
	}

	@Override
	public void postScale(float scale, int scaleTimes) {
		// 布局参数缩放
		int scaledX = ScaleUtil.getScaledValue(mData.getX(), scale);
		int scaledY = ScaleUtil.getScaledValue(mData.getY(), scale);
		int scaledWidth = ScaleUtil.getScaledValue(mData.getWidth(), scale);
		int scaledHeight = ScaleUtil.getScaledValue(mData.getHeight(), scale);
		setLayoutParams(new ElementLayoutParams(mData.getType(), scaledX, scaledY, scaledWidth, scaledHeight));
	}

	/**
	 * 印章拖动
	 * 
	 * @param dx
	 *            x方向的距离
	 * @param dy
	 *            y方向的距离
	 * @param scale
	 *            缩放比例
	 */
	public void move(float dx, float dy, float scale) {
		ElementLayoutParams params = (ElementLayoutParams) getLayoutParams();
		params.setX(Math.round(params.getX() - dx));
		params.setY(Math.round(params.getY() - dy));

		mData.setX(mData.getX() - dx / scale);
		mData.setY(mData.getY() - dy / scale);
		Log.e(TAG, "x:" + mData.getX() + ",y:" + mData.getY());
		Log.d(TAG, "x:" + params.getX() + ",y:" + params.getY());

		requestLayout();
	}
	
	/**
	 * 设置为等待拖拽状态
	 */
	public void setWaitingState() {
		setAlpha(0xaa); 
	}

	/**
	 * 开始拖拽，主要处理拖拽时印章的变化
	 */
	public void startDrag() {
		setAlpha(0x88); 
		ElementLayoutParams params = (ElementLayoutParams) getLayoutParams();
		params.setY(params.getY()-5);//印章被拖拽起来的效果
		requestLayout(); 
	}

	/**
	 * 结束拖拽，主要是让印章恢复初始的状态
	 */
	public void endDrag() {
		setAlpha(0xff); 
		ElementLayoutParams params = (ElementLayoutParams) getLayoutParams();
		params.setY(params.getY()+5);//印章被拖拽起来的效果
		requestLayout(); 
	}
	
	public SignView clone (float scale) {
		SignView signView = new SignView(getContext());
		signView.apply(mData, scale);
		
		return signView;
	}
	
	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
	}

}
